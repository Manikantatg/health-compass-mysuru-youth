
import { AssessmentData } from '../types/assessment';

export const generateHealthReportPDF = async (assessmentData: AssessmentData) => {
  // Import jsPDF dynamically to avoid SSR issues
  const { default: jsPDF } = await import('jspdf');
  
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();

  // Header
  doc.setFillColor(59, 130, 246); // Blue background
  doc.rect(0, 0, pageWidth, 40, 'F');
  
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(24);
  doc.setFont('helvetica', 'bold');
  doc.text('Health Assessment Report', pageWidth / 2, 25, { align: 'center' });

  // Student Information
  doc.setTextColor(0, 0, 0);
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.text('Student Information', 20, 60);

  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  const studentInfo = [
    `Name: ${assessmentData.socioDemographic.name}`,
    `Age: ${assessmentData.socioDemographic.age}`,
    `Class: ${assessmentData.socioDemographic.class}-${assessmentData.socioDemographic.section}`,
    `School: ${assessmentData.socioDemographic.schoolName}`,
    `Assessment Date: ${new Date(assessmentData.completedAt).toLocaleDateString()}`,
    `BMI: ${assessmentData.bmi.toFixed(1)}`
  ];

  studentInfo.forEach((info, index) => {
    doc.text(info, 20, 75 + (index * 8));
  });

  // Health Metrics Section
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.text('Health Metrics', 20, 140);

  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  const healthMetrics = [
    `Risk Level: ${assessmentData.aiPrediction?.riskLevel || 'Medium'}`,
    `Physical Activity Score: ${assessmentData.scores?.physicalActivityScore || 'N/A'}`,
    `Eating Habits Score: ${assessmentData.scores?.eatingHabitsScore || 'N/A'}`,
    `Sleep Quality Score: ${assessmentData.scores?.sleepScore || 'N/A'}`,
    `Mental Health Score: ${assessmentData.scores?.mentalHealthScore || 'N/A'}`
  ];

  healthMetrics.forEach((metric, index) => {
    doc.text(metric, 20, 155 + (index * 8));
  });

  // AI Recommendations
  if (assessmentData.aiPrediction?.recommendations) {
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('AI-Powered Recommendations', 20, 210);

    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    assessmentData.aiPrediction.recommendations.forEach((recommendation, index) => {
      const lines = doc.splitTextToSize(`â€¢ ${recommendation}`, pageWidth - 40);
      doc.text(lines, 20, 225 + (index * 15));
    });
  }

  // Footer
  doc.setFontSize(10);
  doc.setTextColor(128, 128, 128);
  doc.text('Generated by HealthPredict System', pageWidth / 2, pageHeight - 20, { align: 'center' });
  doc.text(`Report generated on ${new Date().toLocaleDateString()}`, pageWidth / 2, pageHeight - 10, { align: 'center' });

  // Save the PDF
  doc.save(`${assessmentData.socioDemographic.name}_Health_Report.pdf`);
};
