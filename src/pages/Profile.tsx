
import React, { useEffect, useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { collection, query, where, orderBy, getDocs } from 'firebase/firestore';
import { db } from '../config/firebase';
import { AssessmentData } from '../types/assessment';
import { Download, Calendar, TrendingUp } from 'lucide-react';
import BMIChart from '../components/dashboard/BMIChart';
import RiskMeter from '../components/dashboard/RiskMeter';

const Profile: React.FC = () => {
  const { currentUser, userProfile } = useAuth();
  const [assessments, setAssessments] = useState<AssessmentData[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchAssessments = async () => {
      if (!currentUser) return;

      try {
        const q = query(
          collection(db, 'assessments'),
          where('userId', '==', currentUser.uid),
          orderBy('completedAt', 'desc')
        );

        const querySnapshot = await getDocs(q);
        const assessmentData = querySnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        })) as AssessmentData[];

        setAssessments(assessmentData);
      } catch (error) {
        console.error('Error fetching assessments:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchAssessments();
  }, [currentUser]);

  const generateReport = () => {
    const latestAssessment = assessments[0];
    if (!latestAssessment) return;

    const reportContent = `
HEALTHPREDICT - PERSONALIZED HEALTH REPORT
==========================================

Student Information:
- Name: ${latestAssessment.socioDemographic.name}
- Age: ${latestAssessment.socioDemographic.age} years
- School: ${latestAssessment.socioDemographic.schoolName}
- Assessment Date: ${new Date(latestAssessment.completedAt).toLocaleDateString()}

Health Metrics:
- Height: ${latestAssessment.socioDemographic.height} cm
- Weight: ${latestAssessment.socioDemographic.weight} kg
- BMI: ${latestAssessment.bmi}
- Risk Level: ${latestAssessment.aiPrediction?.riskLevel}
- Risk Percentage: ${latestAssessment.aiPrediction?.riskPercentage}%

AI Analysis:
${latestAssessment.aiPrediction?.explanation}

Personalized Recommendations:
${latestAssessment.aiPrediction?.recommendations.map((rec, i) => `${i + 1}. ${rec}`).join('\n')}

Family Health History:
- Family Obesity History: ${latestAssessment.socioDemographic.familyObesityHistory ? 'Yes' : 'No'}
- Diabetes History: ${latestAssessment.socioDemographic.diabetesHistory ? 'Yes' : 'No'}
- Blood Pressure History: ${latestAssessment.socioDemographic.bpHistory ? 'Yes' : 'No'}

Sleep Information:
- Bedtime: ${latestAssessment.sleepQuality.bedtime}
- Wake-up Time: ${latestAssessment.sleepQuality.wakeupTime}
- Sleep Issues: ${latestAssessment.sleepQuality.sleepIssues?.length || 0} identified

Note: This report is for informational purposes only and should not replace professional medical advice.
Consult with a healthcare provider for personalized medical guidance.

Generated by HealthPredict - AI-Powered Obesity Prediction Tool
Powered by Swiss Design Thinking â€” "Empowering Young Lives to Learn, Thrive, and Stay Healthy."
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `HealthPredict_Report_${latestAssessment.socioDemographic.name}_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p>Loading your profile...</p>
        </div>
      </div>
    );
  }

  const latestAssessment = assessments[0];

  return (
    <div className="space-y-6">
      {/* Profile Header */}
      <div className="bg-gradient-to-r from-purple-600 to-blue-600 text-white p-6 rounded-lg">
        <h1 className="text-3xl font-bold mb-2">
          {userProfile?.name || 'Student Profile'}
        </h1>
        <p className="text-purple-100">
          School: {userProfile?.schoolName} | Age: {userProfile?.age} years
        </p>
      </div>

      {!latestAssessment ? (
        <Card>
          <CardContent className="text-center py-12">
            <p className="text-gray-600 mb-4">No assessments completed yet.</p>
            <Button onClick={() => window.location.href = '/assessment'}>
              Take Your First Assessment
            </Button>
          </CardContent>
        </Card>
      ) : (
        <>
          {/* Latest Results */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Latest Risk Assessment</CardTitle>
                <CardDescription>
                  Completed on {new Date(latestAssessment.completedAt).toLocaleDateString()}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <RiskMeter 
                  riskLevel={latestAssessment.aiPrediction?.riskLevel || 'Medium'}
                  riskPercentage={latestAssessment.aiPrediction?.riskPercentage || 50}
                />
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>BMI Analysis</CardTitle>
                <CardDescription>Your current Body Mass Index status</CardDescription>
              </CardHeader>
              <CardContent>
                <BMIChart 
                  bmi={latestAssessment.bmi}
                  age={latestAssessment.socioDemographic.age}
                />
              </CardContent>
            </Card>
          </div>

          {/* Detailed Assessment Results */}
          <Card>
            <CardHeader>
              <CardTitle>Detailed Assessment Results</CardTitle>
              <CardDescription>Comprehensive breakdown of your health assessment</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {/* Physical Information */}
                <div className="space-y-3">
                  <h4 className="font-semibold text-gray-900">Physical Information</h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span>Height:</span>
                      <span>{latestAssessment.socioDemographic.height} cm</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Weight:</span>
                      <span>{latestAssessment.socioDemographic.weight} kg</span>
                    </div>
                    <div className="flex justify-between">
                      <span>BMI:</span>
                      <span className="font-medium">{latestAssessment.bmi}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Gender:</span>
                      <span className="capitalize">{latestAssessment.socioDemographic.gender}</span>
                    </div>
                  </div>
                </div>

                {/* Family History */}
                <div className="space-y-3">
                  <h4 className="font-semibold text-gray-900">Family History</h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span>Obesity:</span>
                      <span>{latestAssessment.socioDemographic.familyObesityHistory ? 'Yes' : 'No'}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Diabetes:</span>
                      <span>{latestAssessment.socioDemographic.diabetesHistory ? 'Yes' : 'No'}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Blood Pressure:</span>
                      <span>{latestAssessment.socioDemographic.bpHistory ? 'Yes' : 'No'}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Thyroid:</span>
                      <span>{latestAssessment.socioDemographic.thyroidHistory ? 'Yes' : 'No'}</span>
                    </div>
                  </div>
                </div>

                {/* Lifestyle Factors */}
                <div className="space-y-3">
                  <h4 className="font-semibold text-gray-900">Lifestyle</h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span>PT Frequency:</span>
                      <span>{latestAssessment.physicalActivity.ptFrequency} days/week</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Sleep Schedule:</span>
                      <span>{latestAssessment.sleepQuality.bedtime} - {latestAssessment.sleepQuality.wakeupTime}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Weight Goal:</span>
                      <span className="capitalize">{latestAssessment.mentalHealth.weightGoal}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Hostel Resident:</span>
                      <span>{latestAssessment.socioDemographic.hostelResident ? 'Yes' : 'No'}</span>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* AI Recommendations */}
          <Card>
            <CardHeader>
              <CardTitle>AI-Generated Recommendations</CardTitle>
              <CardDescription>Personalized suggestions based on your assessment</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="mb-4">
                <p className="text-sm text-gray-600 mb-3">
                  <strong>AI Analysis:</strong> {latestAssessment.aiPrediction?.explanation}
                </p>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {latestAssessment.aiPrediction?.recommendations.map((recommendation, index) => (
                  <div key={index} className="p-4 bg-blue-50 rounded-lg border border-blue-200">
                    <div className="flex items-start space-x-2">
                      <div className="w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-xs font-bold mt-0.5">
                        {index + 1}
                      </div>
                      <p className="text-sm text-blue-900">{recommendation}</p>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Assessment History */}
          {assessments.length > 1 && (
            <Card>
              <CardHeader>
                <CardTitle>Assessment History</CardTitle>
                <CardDescription>Track your progress over time</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {assessments.slice(1, 5).map((assessment, index) => (
                    <div key={assessment.id} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                      <div className="flex items-center space-x-4">
                        <Calendar className="h-5 w-5 text-gray-500" />
                        <div>
                          <p className="font-medium">
                            {new Date(assessment.completedAt).toLocaleDateString()}
                          </p>
                          <p className="text-sm text-gray-600">
                            BMI: {assessment.bmi} | Risk: {assessment.aiPrediction?.riskLevel}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <TrendingUp className="h-4 w-4 text-gray-500" />
                        <span className="text-sm text-gray-600">
                          {assessment.aiPrediction?.riskPercentage}%
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Actions */}
          <div className="flex space-x-4">
            <Button onClick={generateReport} className="flex items-center space-x-2">
              <Download className="h-4 w-4" />
              <span>Download Report</span>
            </Button>
            <Button variant="outline" onClick={() => window.location.href = '/assessment'}>
              Take New Assessment
            </Button>
          </div>
        </>
      )}
    </div>
  );
};

export default Profile;
